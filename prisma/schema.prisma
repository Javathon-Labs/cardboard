generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  GUEST
}

model GuildedAuthSession {
  id          String @id @unique @default(uuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String 
  user      GuildedUser     @relation(references: [id], fields: [userId])
}

model GuildedUser {
  id String @id @unique
  username String 
  avatar String @default("/poop.png")
  banner String @default("https://img.guildedcdn.com/asset/Default/ProfileBannerLarge.png")
  sessions GuildedAuthSession[]
  myAuthApps UserAppManager[]
  myApps App[]
  role UserRole @default(GUEST)
}

model GuildedVerificationSessions {
  id          String @id @unique @default(uuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String @unique
}

model UserAppManager {
  id String @id @unique @default(uuid())
  user GuildedUser @relation(fields: [userId], references: [id])
  userId String
  app App @relation(fields: [appId], references: [id])
  appId String
  authorizedSessions AuthorizedAppSession[]
}

model App {
  id         String @id @unique @default(uuid())
  createdAt DateTime @default(now())
  ownerUser GuildedUser @relation(fields: [ownerId], references: [id])
  ownerId String
  sessionManagers UserAppManager[]
  name String
  description String @default("A cardboard app.")
  icon String @default("/poop.png")
  banner String @default("https://img.guildedcdn.com/asset/Default/ProfileBannerLarge.png")
  secret String @default(uuid())
  redirectUri String
  supportServer String
  vanityCode String @unique @default(uuid())
  isVerified Boolean @default(false)
}

model AuthorizedAppSession {
  id         String @id @unique @default(uuid())
  userAppManager UserAppManager @relation(fields: [userAppManagerId], references: [id])
  userAppManagerId String
  createdAt DateTime @default(now())
  expiresAt DateTime
  refreshedAt DateTime @default(now())
  refreshToken String @unique @default(uuid())
  authToken String @unique @default(uuid())
}
